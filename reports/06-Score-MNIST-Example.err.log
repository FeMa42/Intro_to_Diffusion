Traceback (most recent call last):
  File "/Users/damian/miniconda3/envs/pt38/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/damian/miniconda3/envs/pt38/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/damian/miniconda3/envs/pt38/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/damian/miniconda3/envs/pt38/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/Users/damian/miniconda3/envs/pt38/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/damian/miniconda3/envs/pt38/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/damian/miniconda3/envs/pt38/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#@title Sampling (double click to expand or collapse)

from torchvision.utils import make_grid

## Load the pre-trained checkpoint from disk.
device = 'mps' #@param ['cuda', 'cpu'] {'type':'string'}
ckpt = torch.load('ckpt.pth', map_location=device)
score_model.load_state_dict(ckpt)

sample_batch_size = 64 #@param {'type':'integer'}
sampler = pc_sampler #@param ['Euler_Maruyama_sampler', 'pc_sampler', 'ode_sampler'] {'type': 'raw'}

## Generate samples using the specified sampler.
samples = sampler(score_model,
                  marginal_prob_std_fn,
                  diffusion_coeff_fn,
                  sample_batch_size,
                  device=device)

## Sample visualization.
samples = samples.clamp(0.0, 1.0)
%matplotlib inline
import matplotlib.pyplot as plt
sample_grid = make_grid(samples, nrow=int(np.sqrt(sample_batch_size)))

plt.figure(figsize=(6,6))
plt.axis('off')
plt.imshow(sample_grid.permute(1, 2, 0).cpu(), vmin=0., vmax=1.)
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[8], line 7[0m
[1;32m      5[0m [38;5;66;03m## Load the pre-trained checkpoint from disk.[39;00m
[1;32m      6[0m device [38;5;241m=[39m [38;5;124m'[39m[38;5;124mmps[39m[38;5;124m'[39m [38;5;66;03m#@param ['cuda', 'cpu'] {'type':'string'}[39;00m
[0;32m----> 7[0m ckpt [38;5;241m=[39m [43mtorch[49m[38;5;241;43m.[39;49m[43mload[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mckpt.pth[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mmap_location[49m[38;5;241;43m=[39;49m[43mdevice[49m[43m)[49m
[1;32m      8[0m score_model[38;5;241m.[39mload_state_dict(ckpt)
[1;32m     10[0m sample_batch_size [38;5;241m=[39m [38;5;241m64[39m [38;5;66;03m#@param {'type':'integer'}[39;00m

File [0;32m~/miniconda3/envs/pt38/lib/python3.8/site-packages/torch/serialization.py:872[0m, in [0;36mload[0;34m(f, map_location, pickle_module, weights_only, mmap, **pickle_load_args)[0m
[1;32m    869[0m [38;5;28;01mif[39;00m [38;5;124m'[39m[38;5;124mencoding[39m[38;5;124m'[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m pickle_load_args[38;5;241m.[39mkeys():
[1;32m    870[0m     pickle_load_args[[38;5;124m'[39m[38;5;124mencoding[39m[38;5;124m'[39m] [38;5;241m=[39m [38;5;124m'[39m[38;5;124mutf-8[39m[38;5;124m'[39m
[0;32m--> 872[0m [38;5;28;01mwith[39;00m [43m_open_file_like[49m[43m([49m[43mf[49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mrb[39;49m[38;5;124;43m'[39;49m[43m)[49m [38;5;28;01mas[39;00m opened_file:
[1;32m    873[0m     [38;5;28;01mif[39;00m _is_zipfile(opened_file):
[1;32m    874[0m         [38;5;66;03m# The zipfile reader is going to advance the current file position.[39;00m
[1;32m    875[0m         [38;5;66;03m# If we want to actually tail call to torch.jit.load, we need to[39;00m
[1;32m    876[0m         [38;5;66;03m# reset back to the original position.[39;00m
[1;32m    877[0m         orig_position [38;5;241m=[39m opened_file[38;5;241m.[39mtell()

File [0;32m~/miniconda3/envs/pt38/lib/python3.8/site-packages/torch/serialization.py:321[0m, in [0;36m_open_file_like[0;34m(name_or_buffer, mode)[0m
[1;32m    319[0m [38;5;28;01mdef[39;00m [38;5;21m_open_file_like[39m(name_or_buffer, mode):
[1;32m    320[0m     [38;5;28;01mif[39;00m _is_path(name_or_buffer):
[0;32m--> 321[0m         [38;5;28;01mreturn[39;00m [43m_open_file[49m[43m([49m[43mname_or_buffer[49m[43m,[49m[43m [49m[43mmode[49m[43m)[49m
[1;32m    322[0m     [38;5;28;01melse[39;00m:
[1;32m    323[0m         [38;5;28;01mif[39;00m [38;5;124m'[39m[38;5;124mw[39m[38;5;124m'[39m [38;5;129;01min[39;00m mode:

File [0;32m~/miniconda3/envs/pt38/lib/python3.8/site-packages/torch/serialization.py:302[0m, in [0;36m_open_file.__init__[0;34m(self, name, mode)[0m
[1;32m    301[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m, name, mode):
[0;32m--> 302[0m     [38;5;28msuper[39m()[38;5;241m.[39m[38;5;21m__init__[39m([38;5;28;43mopen[39;49m[43m([49m[43mname[49m[43m,[49m[43m [49m[43mmode[49m[43m)[49m)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'ckpt.pth'

